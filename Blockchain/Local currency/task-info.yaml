type: edu
files:
- name: src/Main.kt
  visible: true
  text: |-
    package blockchain

    fun main() {
        println("Hello World!")
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<Clue>().setTimeLimit(30000),
                new TestCase<Clue>().setTimeLimit(30000)
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/Client.kt
  visible: true
  text: |
    package blockchain

    import kotlin.random.Random

    class Client(
        private val name: String,
        private val blockchain: Blockchain
    ) : Thread() {

        private val random = Random(name.hashCode())

        private fun randomString() = (1..20)
            .map { random.nextInt(32, 127) }
            .map { it.toChar() }
            .joinToString("")

        override fun run() {
            while (!isInterrupted) {
                blockchain.submitTransaction(Transaction(name, randomString()))
                try {
                    sleep(random.nextLong(200L, 300L))
                } catch (e: InterruptedException) {
                    break
                }
            }
        }

    }
  learner_created: true
- name: src/hashUtils.kt
  visible: true
  text: |
    package blockchain

    import java.security.MessageDigest

    fun applySha256(input: String) = MessageDigest.getInstance("SHA-256")
        .digest(input.toByteArray(charset("UTF-8")))
        .map(Byte::toInt).joinToString("") {
            Integer.toHexString(0xff and it).padStart(2, '0')
        }
  learner_created: true
- name: src/Block.kt
  visible: true
  text: |-
    package blockchain

    import kotlin.math.abs

    data class Transaction(val from: String?, val to: String, val amount: Int) {
        override fun toString() = if (from == null) "$to gets $amount VC" else "$from sent $amount VC to $to"
    }

    class Block(
        val id: Long,
        val minerId: Long,
        val magicNumber: Int,
        val prev: Block? = null,
        val transactions: List<Transaction>
    ) {

        private val messagesString = transactions.joinToString("\n")

        private val timestamp: Long = System.currentTimeMillis()

        val hash: String =
            applySha256("$id|$minerId|$timestamp|$messagesString|${prev?.hash ?: 0}|$magicNumber")

        var generationDuration = -1L
            set(value) {
                assert(field == -1L) { "Can't reassign generationDuration" }
                field = value
            }

        var zeroCountChange = -1
            set(value) {
                assert(field == -1) { "Can't reassign zeroCountChange" }
                field = value
            }

        private val zeroCountChangeDescription
            get() = when {
                zeroCountChange < 0 -> "decreased by ${abs(zeroCountChange)}"
                zeroCountChange > 0 -> "increased by $zeroCountChange"
                else -> "stays the same"
            }

        override fun toString() = """Block:
    Created by miner # $minerId
    Id: $id
    Timestamp: $timestamp
    Magic number: $magicNumber
    Hash of the previous block:
    ${prev?.hash ?: 0}
    Hash of the block:
    $hash
    Block data: ${if (transactions.isEmpty()) "no messages" else "\n" + messagesString}
    Block was generating for ${generationDuration / 1000} seconds
    N $zeroCountChangeDescription
    """

    }
  learner_created: true
- name: src/Blockchain.kt
  visible: true
  text: |-
    package blockchain

    import java.util.concurrent.locks.Condition
    import java.util.concurrent.locks.ReentrantLock
    import kotlin.concurrent.withLock
    import kotlin.math.log10

    class Blockchain {

        companion object {
            const val MAX_BLOCKS = 15L
        }

        val lock = ReentrantLock()
        val enoughBlocksMined: Condition = lock.newCondition()

        var last: Block? = null
            private set
            get() = synchronized(lock) { field }

        var zeroCount: Int = 3
            private set
            get() = synchronized(lock) { field }

        private var lastGenerationTime: Long = System.currentTimeMillis()

        private val transactions = mutableListOf<Transaction>()

        fun getPendingTransactions() = lock.withLock { transactions.toList() }

        fun getBalance(name: String): Int {
            var balance = 0
            var block = last
            while (block != null) {
                block.transactions.forEach { tx ->
                    // TODO
                    if (tx.from == name) {
                        balance += tx.amount
                    } else if (tx.to == name) {
                        balance -= tx.amount
                    }
                }
                block = block.prev
            }
            return balance
        }

        fun submitTransaction(transaction: Transaction) = lock.withLock {
            transactions.add(transaction)
        }

        fun submitBlock(block: Block) = lock.withLock {
            // validate the block, if the block is invalid, just ignore it
            // with the current implementation we don't need to validate the hash, as it's calculated in the Block class
            if (block.id == (last?.id ?: 0) + 1
                && block.prev == last
                && block.hash.startsWith("0".repeat(zeroCount))
                && transactions.subList(0, block.transactions.size) == block.transactions
            ) {
                // calculate the generation duration
                System.currentTimeMillis().let { generationTime ->
                    block.generationDuration = generationTime - lastGenerationTime
                    lastGenerationTime = generationTime
                }

                // make sure the time to generate the block stays within (100..1000) milliseconds
                // if not, increase/decrease it logarithmically
                block.zeroCountChange = (2 - log10(block.generationDuration.toDouble()).toInt())
                    // make sure zeroCount always stays positive
                    .coerceAtLeast(1 - zeroCount)
                zeroCount += block.zeroCountChange

                last = block

                println(block)

                repeat(block.transactions.size) { transactions.removeFirst() }

                // if we've mined enough blocks, signal the termination condition
                if (block.id == MAX_BLOCKS) {
                    enoughBlocksMined.signal()
                }
            }
        }

    }
  learner_created: true
- name: src/Miner.kt
  visible: true
  text: |
    package blockchain

    import kotlin.random.Random

    class Miner(
        private val id: Long,
        private val blockchain: Blockchain
    ) : Thread() {

        private val random = Random(id)

        override fun run() {
            while (true) {
                val messages = blockchain.getPendingTransactions()
                val prefix = "0".repeat(blockchain.zeroCount)
                val blockId = (blockchain.last?.id ?: 0) + 1
                var block: Block? = null
                while (block?.hash?.startsWith(prefix) != true) {
                    if (isInterrupted) {
                        return
                    }
                    block = Block(
                        id = blockId,
                        minerId = id,
                        prev = blockchain.last,
                        magicNumber = random.nextInt(),
                        transactions = messages
                    )
                }
                blockchain.submitBlock(block)
            }
        }

    }
  learner_created: true
- name: src/users.kt
  visible: true
  learner_created: true
- name: src/Agent.kt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/20397#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Wed, 11 Jan 2023 07:09:18 UTC"
record: -1
